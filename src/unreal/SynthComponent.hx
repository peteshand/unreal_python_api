/* This file is generated, do not edit! */
package unreal;
@:pythonImport("unreal", "SynthComponent") extern class SynthComponent extends unreal.SceneComponent {
	/**
		(bool):  [Read-Write] Is this audio component allowed to be spatialized?
	**/
	public var allow_spatialization : Bool;
	/**
		(SoundAttenuationSettings):  [Read-Write] If bOverrideSettings is true, the attenuation properties to use for sounds generated by this component
	**/
	public var attenuation_overrides : unreal.SoundAttenuationSettings;
	/**
		(SoundAttenuation):  [Read-Write] If bOverrideSettings is false, the asset to use to determine attenuation properties for sounds generated by this component
	**/
	public var attenuation_settings : unreal.SoundAttenuation;
	/**
		(Array(SoundSourceBusSendInfo)):  [Read-Write] This sound will send its audio output to this list of buses if there are bus instances playing after source effects are processed.
	**/
	public var bus_sends : Array<Dynamic>;
	/**
		(Set(SoundConcurrency)):  [Read-Write] What sound concurrency to use for sounds generated by this audio component
	**/
	public var concurrency_set : Dynamic;
	/**
		(int32):  [Read-Write] The attack time in milliseconds for the envelope follower. Delegate callbacks can be registered to get the envelope value of sounds played with this audio component. Only used in audio mixer.
	**/
	public var envelope_follower_attack_time : Int;
	/**
		(int32):  [Read-Write] The release time in milliseconds for the envelope follower. Delegate callbacks can be registered to get the envelope value of sounds played with this audio component. Only used in audio mixer.
	**/
	public var envelope_follower_release_time : Int;
	/**
		x.is_playing() -> bool
		Returns true if this component is currently playing.
		
		Returns:
		    bool:
	**/
	public function is_playing():Bool;
	/**
		(bool):  [Read-Write] Whether or not this sound plays when the game is paused in the UI
	**/
	public var is_ui_sound : Bool;
	/**
		(OnSynthEnvelopeValue):  [Read-Write] On Audio Envelope Value
	**/
	public var on_audio_envelope_value : unreal.OnSynthEnvelopeValue;
	/**
		(bool):  [Read-Write] Whether or not to only send this audio's output to a bus. If true, will not be this sound won't be audible except through bus sends.
	**/
	public var output_to_bus_only : Bool;
	/**
		(bool):  [Read-Write] Should the Attenuation Settings asset be used (false) or should the properties set directly on the component be used for attenuation properties
	**/
	public var override_attenuation : Bool;
	/**
		(Array(SoundSourceBusSendInfo)):  [Read-Write] This sound will send its audio output to this list of buses if there are bus instances playing before source effects are processed.
	**/
	public var pre_effect_bus_sends : Array<Dynamic>;
	/**
		x.set_low_pass_filter_enabled(low_pass_filter_enabled) -> None
		Sets whether or not the low pass filter is enabled on the audio component.
		
		Args:
		    low_pass_filter_enabled (bool):
	**/
	public function set_low_pass_filter_enabled(low_pass_filter_enabled:Bool):Void;
	/**
		x.set_low_pass_filter_frequency(low_pass_filter_frequency) -> None
		Sets lowpass filter frequency of the audio component.
		
		Args:
		    low_pass_filter_frequency (float):
	**/
	public function set_low_pass_filter_frequency(low_pass_filter_frequency:Float):Void;
	/**
		x.set_submix_send(submix, send_level) -> None
		Sets how much audio the sound should send to the given submix.
		
		Args:
		    submix (SoundSubmixBase): 
		    send_level (float):
	**/
	public function set_submix_send(submix:unreal.SoundSubmixBase, send_level:Float):Void;
	/**
		x.set_volume_multiplier(volume_multiplier) -> None
		Sets how much audio the sound should send to the given submix.
		
		Args:
		    volume_multiplier (float):
	**/
	public function set_volume_multiplier(volume_multiplier:Float):Void;
	/**
		(Array(SoundSubmixSendInfo)):  [Read-Write] An array of submix sends. Audio from this sound will send a portion of its audio to these effects.
	**/
	public var sound_submix_sends : Array<Dynamic>;
	/**
		x.start() -> None
		Starts the synth generating audio.
	**/
	public function start():Void;
	/**
		x.stop() -> None
		Stops the synth generating audio.
	**/
	public function stop():Void;
}