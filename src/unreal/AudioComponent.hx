/* This file is generated, do not edit! */
package unreal;
@:pythonImport("unreal", "AudioComponent") extern class AudioComponent extends unreal.SceneComponent {
	/**
		x.adjust_attenuation(attenuation_settings) -> None
		Modify the attenuation settings of the audio component
		
		Args:
		    attenuation_settings (SoundAttenuationSettings):
	**/
	public function adjust_attenuation(attenuation_settings:unreal.SoundAttenuationSettings):Void;
	/**
		x.adjust_volume(adjust_volume_duration, adjust_volume_level, fade_curve=AudioFaderCurve.LINEAR) -> None
		This will allow one to adjust the volume of an AudioComponent on the fly
		
		Args:
		    adjust_volume_duration (float): 
		    adjust_volume_level (float): 
		    fade_curve (AudioFaderCurve):
	**/
	public function adjust_volume(adjust_volume_duration:Float, adjust_volume_level:Float, fade_curve:unreal.AudioFaderCurve = AudioFaderCurve.LINEAR):Void;
	/**
		(bool):  [Read-Write] Overrides spatialization enablement in either the attenuation asset or on this audio component's attenuation settings override.
	**/
	public var allow_spatialization : Bool;
	/**
		(SoundAttenuationSettings):  [Read-Write] If bOverrideSettings is true, the attenuation properties to use for sounds generated by this component
	**/
	public var attenuation_overrides : unreal.SoundAttenuationSettings;
	/**
		(SoundAttenuation):  [Read-Write] If bOverrideSettings is false, the asset to use to determine attenuation properties for sounds generated by this component
	**/
	public var attenuation_settings : unreal.SoundAttenuation;
	/**
		(AttachmentRule):  [Read-Write] Options for how we handle our location when we attach to the AutoAttachParent, if bAutoManageAttachment is true.
		bAutoManageAttachment, EAttachmentRule:
	**/
	public var auto_attach_location_rule : unreal.AttachmentRule;
	/**
		(SceneComponent):  [Read-Only] Component we automatically attach to when activated, if bAutoManageAttachment is true.
		If null during registration, we assign the existing AttachParent and defer attachment until we activate.
		bAutoManageAttachment:
	**/
	public var auto_attach_parent : unreal.SceneComponent;
	/**
		(AttachmentRule):  [Read-Write] Options for how we handle our rotation when we attach to the AutoAttachParent, if bAutoManageAttachment is true.
		bAutoManageAttachment, EAttachmentRule:
	**/
	public var auto_attach_rotation_rule : unreal.AttachmentRule;
	/**
		(AttachmentRule):  [Read-Write] Options for how we handle our scale when we attach to the AutoAttachParent, if bAutoManageAttachment is true.
		bAutoManageAttachment, EAttachmentRule:
	**/
	public var auto_attach_scale_rule : unreal.AttachmentRule;
	/**
		(Name):  [Read-Write] Socket we automatically attach to on the AutoAttachParent, if bAutoManageAttachment is true.
		bAutoManageAttachment:
	**/
	public var auto_attach_socket_name : unreal.Name;
	/**
		(bool):  [Read-Only] True if we should automatically attach to AutoAttachParent when Played, and detach from our parent when playback is completed.
		This overrides any current attachment that may be present at the time of activation (deferring initial attachment until activation, if AutoAttachParent is null).
		If enabled, this AudioComponent's WorldLocation will no longer be reliable when not currently playing audio, and any attach children will also be detached/attached along with it.
		When enabled, detachment occurs regardless of whether AutoAttachParent is assigned, and the relative transform from the time of activation is restored.
		This also disables attachment on dedicated servers, where we don't actually activate even if bAutoActivate is true.
		AutoAttachParent, AutoAttachSocketName, AutoAttachLocationType:
	**/
	public var auto_manage_attachment : Bool;
	/**
		(Set(SoundConcurrency)):  [Read-Write] What sound concurrency rules to use for sounds generated by this audio component
	**/
	public var concurrency_set : Dynamic;
	/**
		(bool):  [Read-Write] Whether or not to apply a low-pass filter to the sound that plays in this audio component.
	**/
	public var enable_low_pass_filter : Bool;
	/**
		(int32):  [Read-Write] The attack time in milliseconds for the envelope follower. Delegate callbacks can be registered to get the envelope value of sounds played with this audio component. Only used in audio mixer.
	**/
	public var envelope_follower_attack_time : Int;
	/**
		(int32):  [Read-Write] The release time in milliseconds for the envelope follower. Delegate callbacks can be registered to get the envelope value of sounds played with this audio component. Only used in audio mixer.
	**/
	public var envelope_follower_release_time : Int;
	/**
		x.fade_in(fade_in_duration, fade_volume_level=1.000000, start_time=0.000000, fade_curve=AudioFaderCurve.LINEAR) -> None
		This can be used in place of "play" when it is desired to fade in the sound over time.
		
		If FadeTime is 0.0, the change in volume is instant.
		If FadeTime is > 0.0, the multiplier will be increased from 0 to FadeVolumeLevel over FadeIn seconds.
		
		Args:
		    fade_in_duration (float): how long it should take to reach the FadeVolumeLevel
		    fade_volume_level (float): the percentage of the AudioComponents's calculated volume to fade to
		    start_time (float): 
		    fade_curve (AudioFaderCurve):
	**/
	public function fade_in(fade_in_duration:Float, fade_volume_level:Float = 1.000000, start_time:Float = 0.000000, fade_curve:unreal.AudioFaderCurve = AudioFaderCurve.LINEAR):Void;
	/**
		x.fade_out(fade_out_duration, fade_volume_level, fade_curve=AudioFaderCurve.LINEAR) -> None
		This is used in place of "stop" when it is desired to fade the volume of the sound before stopping.
		
		If FadeTime is 0.0, this is the same as calling Stop().
		If FadeTime is > 0.0, this will adjust the volume multiplier to FadeVolumeLevel over FadeInTime seconds
		and then stop the sound.
		
		Args:
		    fade_out_duration (float): how long it should take to reach the FadeVolumeLevel
		    fade_volume_level (float): the percentage of the AudioComponents's calculated volume in which to fade to
		    fade_curve (AudioFaderCurve):
	**/
	public function fade_out(fade_out_duration:Float, fade_volume_level:Float, fade_curve:unreal.AudioFaderCurve = AudioFaderCurve.LINEAR):Void;
	/**
		x.get_attenuation_settings_to_apply() -> SoundAttenuationSettings or None
		BP Get Attenuation Settings to Apply
		
		Returns:
		    SoundAttenuationSettings or None: 
		
		    out_attenuation_settings (SoundAttenuationSettings):
	**/
	public function get_attenuation_settings_to_apply():Dynamic;
	/**
		x.get_cooked_envelope_data() -> float or None
		Retrieves the current-time cooked envelope data of the playing audio component.
		Cooked data is interpolated and averaged across all playing sound waves.
		Returns true if there is data and the audio component is playing.
		
		Returns:
		    float or None: 
		
		    out_envelope_data (float):
	**/
	public function get_cooked_envelope_data():Dynamic;
	/**
		x.get_cooked_envelope_data_for_all_playing_sounds() -> Array(SoundWaveEnvelopeDataPerSound) or None
		Retrieves the current-time envelope data of the sounds playing audio component.
		Envelope data is not averaged or interpolated. Instead an array of data with all playing sound waves with cooked data is returned.
		Returns true if there is data and the audio component is playing.
		
		Returns:
		    Array(SoundWaveEnvelopeDataPerSound) or None: 
		
		    out_envelope_data (Array(SoundWaveEnvelopeDataPerSound)):
	**/
	public function get_cooked_envelope_data_for_all_playing_sounds():Array<SoundWaveEnvelopeDataPerSound>;
	/**
		x.get_cooked_fft_data(frequencies_to_get) -> Array(SoundWaveSpectralData) or None
		Retrieves the current-time cooked spectral data of the sounds playing on the audio component.
		Spectral data is averaged and interpolated for all playing sounds on this audio component.
		Returns true if there is data and the audio component is playing.
		
		Args:
		    frequencies_to_get (Array(float)): 
		
		Returns:
		    Array(SoundWaveSpectralData) or None: 
		
		    out_sound_wave_spectral_data (Array(SoundWaveSpectralData)):
	**/
	public function get_cooked_fft_data(frequencies_to_get:Array<float>):Array<SoundWaveSpectralData>;
	/**
		x.get_cooked_fft_data_for_all_playing_sounds() -> Array(SoundWaveSpectralDataPerSound) or None
		Retrieves the current-time cooked spectral data of the sounds playing audio component.
		Spectral data is not averaged or interpolated. Instead an array of data with all playing sound waves with cooked data is returned.
		Returns true if there is data and the audio component is playing.
		
		Returns:
		    Array(SoundWaveSpectralDataPerSound) or None: 
		
		    out_sound_wave_spectral_data (Array(SoundWaveSpectralDataPerSound)):
	**/
	public function get_cooked_fft_data_for_all_playing_sounds():Array<SoundWaveSpectralDataPerSound>;
	/**
		x.get_play_state() -> AudioComponentPlayState
		Returns the enumerated play states of the audio component.
		
		Returns:
		    AudioComponentPlayState:
	**/
	public function get_play_state():unreal.AudioComponentPlayState;
	/**
		x.has_cooked_amplitude_envelope_data() -> bool
		Queries if the sound wave playing in this audio component has cooked amplitude analyses.
		
		Returns:
		    bool:
	**/
	public function has_cooked_amplitude_envelope_data():Bool;
	/**
		x.has_cooked_fft_data() -> bool
		Queries if the sound wave playing in this audio component has cooked FFT data.
		
		Returns:
		    bool:
	**/
	public function has_cooked_fft_data():Bool;
	/**
		(Array(AudioComponentParam)):  [Read-Write] Array of per-instance parameters for this AudioComponent.
	**/
	public var instance_parameters : Array<Dynamic>;
	/**
		x.is_playing() -> bool
		Returns if the sound playing any audio. Doesn't indicate the play state. Use GetPlayState() to get the actual play state.
		
		Returns:
		    bool:
	**/
	public function is_playing():Bool;
	/**
		(bool):  [Read-Write] Whether or not this sound plays when the game is paused in the UI
	**/
	public var is_ui_sound : Bool;
	/**
		x.is_virtualized() -> bool
		Returns if the sound is virtualized.
		
		Returns:
		    bool:
	**/
	public function is_virtualized():Bool;
	/**
		(float):  [Read-Write] The frequency of the lowpass filter (in hertz) to apply to this voice. A frequency of 0.0 is the device sample rate and will bypass the filter.
	**/
	public var low_pass_filter_frequency : Float;
	/**
		(SoundModulationDefaultRoutingSettings):  [Read-Write] Modulation Routing
	**/
	public var modulation_routing : unreal.SoundModulationDefaultRoutingSettings;
	/**
		(OnAudioFinished):  [Read-Write] called when we finish playing audio, either because it played to completion or because a Stop() call turned it off early
	**/
	public var on_audio_finished : unreal.OnAudioFinished;
	/**
		(OnAudioMultiEnvelopeValue):  [Read-Write] On Audio Multi Envelope Value
	**/
	public var on_audio_multi_envelope_value : unreal.OnAudioMultiEnvelopeValue;
	/**
		(OnAudioPlayStateChanged):  [Read-Write] Called when PlayState changes
	**/
	public var on_audio_play_state_changed : unreal.OnAudioPlayStateChanged;
	/**
		(OnAudioPlaybackPercent):  [Read-Write] Called as a sound plays on the audio component to allow BP to perform actions based on playback percentage.
		Computed as samples played divided by total samples, taking into account pitch.
		Not currently implemented on all platforms.
	**/
	public var on_audio_playback_percent : unreal.OnAudioPlaybackPercent;
	/**
		(OnAudioSingleEnvelopeValue):  [Read-Write] On Audio Single Envelope Value
	**/
	public var on_audio_single_envelope_value : unreal.OnAudioSingleEnvelopeValue;
	/**
		(OnAudioVirtualizationChanged):  [Read-Write] Called when virtualization state changes
	**/
	public var on_audio_virtualization_changed : unreal.OnAudioVirtualizationChanged;
	/**
		(bool):  [Read-Write] Allows defining attenuation settings directly on this audio component without using an attenuation settings asset.
	**/
	public var override_attenuation : Bool;
	/**
		(bool):  [Read-Write] Override Priority
	**/
	public var override_priority : Bool;
	/**
		(bool):  [Read-Write] Whether or not to override the sound's subtitle priority.
	**/
	public var override_subtitle_priority : Bool;
	/**
		(float):  [Read-Write] The upper bound to use when randomly determining a pitch multiplier
	**/
	public var pitch_modulation_max : Float;
	/**
		(float):  [Read-Write] The lower bound to use when randomly determining a pitch multiplier
	**/
	public var pitch_modulation_min : Float;
	/**
		(float):  [Read-Write] A pitch multiplier to apply to sounds generated by this component
	**/
	public var pitch_multiplier : Float;
	/**
		deprecated: 'pitch_multiplier_max' was renamed to 'pitch_modulation_max'.
	**/
	@:deprecated
	public var pitch_multiplier_max : Dynamic;
	/**
		deprecated: 'pitch_multiplier_min' was renamed to 'pitch_modulation_min'.
	**/
	@:deprecated
	public var pitch_multiplier_min : Dynamic;
	/**
		x.play(start_time=0.000000) -> None
		Start a sound playing on an audio component
		
		Args:
		    start_time (float):
	**/
	public function play(start_time:Float = 0.000000):Void;
	/**
		x.play_quantized(world_context_object, clock_handle, quantization_boundary, delegate, start_time=0.000000, fade_in_duration=0.000000, fade_volume_level=1.000000, fade_curve=AudioFaderCurve.LINEAR) -> (clock_handle=QuartzClockHandle, quantization_boundary=QuartzQuantizationBoundary)
		Start a sound playing on an audio component on a given quantization boundary with the handle to an existing clock
		
		Args:
		    world_context_object (Object): 
		    clock_handle (QuartzClockHandle): 
		    quantization_boundary (QuartzQuantizationBoundary): 
		    delegate (OnQuartzCommandEventBP): 
		    start_time (float): 
		    fade_in_duration (float): 
		    fade_volume_level (float): 
		    fade_curve (AudioFaderCurve): 
		
		Returns:
		    tuple: 
		
		    clock_handle (QuartzClockHandle): 
		
		    quantization_boundary (QuartzQuantizationBoundary):
	**/
	public function play_quantized(world_context_object:unreal.Object, clock_handle:unreal.QuartzClockHandle, quantization_boundary:unreal.QuartzQuantizationBoundary, delegate:unreal.OnQuartzCommandEventBP, start_time:Float = 0.000000, fade_in_duration:Float = 0.000000, fade_volume_level:Float = 1.000000, fade_curve:unreal.AudioFaderCurve = AudioFaderCurve.LINEAR):python.Tuple<Dynamic>;
	/**
		(float):  [Read-Write] A priority value that is used for sounds that play on this component that scales against final output volume.
	**/
	public var priority : Float;
	/**
		x.set_audio_bus_send_post_effect(audio_bus, source_bus_send_level) -> None
		Sets how much audio the sound should send to the given Audio Bus (POST Source Effects).
		              if the Audio Bus Send doesn't already exist, it will be added to the overrides on the active sound
		
		Args:
		    audio_bus (AudioBus): 
		    source_bus_send_level (float):
	**/
	public function set_audio_bus_send_post_effect(audio_bus:unreal.AudioBus, source_bus_send_level:Float):Void;
	/**
		x.set_audio_bus_send_pre_effect(audio_bus, audio_bus_send_level) -> None
		Sets how much audio the sound should send to the given Audio Bus (PRE Source Effects).
		      if the Bus Send doesn't already exist, it will be added to the overrides on the active sound
		
		Args:
		    audio_bus (AudioBus): 
		    audio_bus_send_level (float):
	**/
	public function set_audio_bus_send_pre_effect(audio_bus:unreal.AudioBus, audio_bus_send_level:Float):Void;
	/**
		x.set_bool_parameter(name, bool) -> None
		Set a boolean instance parameter for use in sound cues played by this audio component
		
		Args:
		    name (Name): 
		    bool (bool):
	**/
	public function set_bool_parameter(name:unreal.Name, bool:Bool):Void;
	/**
		x.set_float_parameter(name, float) -> None
		Set a float instance parameter for use in sound cues played by this audio component
		
		Args:
		    name (Name): 
		    float (float):
	**/
	public function set_float_parameter(name:unreal.Name, float:Float):Void;
	/**
		x.set_int_parameter(name, int) -> None
		Set an integer instance parameter for use in sound cues played by this audio component
		
		Args:
		    name (Name): 
		    int (int32):
	**/
	public function set_int_parameter(name:unreal.Name, int:Int):Void;
	/**
		x.set_low_pass_filter_enabled(low_pass_filter_enabled) -> None
		Sets whether or not the low pass filter is enabled on the audio component.
		
		Args:
		    low_pass_filter_enabled (bool):
	**/
	public function set_low_pass_filter_enabled(low_pass_filter_enabled:Bool):Void;
	/**
		x.set_low_pass_filter_frequency(low_pass_filter_frequency) -> None
		Sets lowpass filter frequency of the audio component.
		
		Args:
		    low_pass_filter_frequency (float):
	**/
	public function set_low_pass_filter_frequency(low_pass_filter_frequency:Float):Void;
	/**
		x.set_paused(pause) -> None
		Pause an audio component playing its sound cue, issue any delegates if needed
		
		Args:
		    pause (bool):
	**/
	public function set_paused(pause:Bool):Void;
	/**
		x.set_pitch_multiplier(new_pitch_multiplier) -> None
		Set a new pitch multiplier
		
		Args:
		    new_pitch_multiplier (float):
	**/
	public function set_pitch_multiplier(new_pitch_multiplier:Float):Void;
	/**
		x.set_sound(new_sound) -> None
		Set what sound is played by this component
		
		Args:
		    new_sound (SoundBase):
	**/
	public function set_sound(new_sound:unreal.SoundBase):Void;
	/**
		x.set_source_bus_send_post_effect(sound_source_bus, source_bus_send_level) -> None
		Sets how much audio the sound should send to the given Source Bus (POST Source Effects).
		              if the Bus Send doesn't already exist, it will be added to the overrides on the active sound
		
		Args:
		    sound_source_bus (SoundSourceBus): 
		    source_bus_send_level (float):
	**/
	public function set_source_bus_send_post_effect(sound_source_bus:unreal.SoundSourceBus, source_bus_send_level:Float):Void;
	/**
		x.set_source_bus_send_pre_effect(sound_source_bus, source_bus_send_level) -> None
		Sets how much audio the sound should send to the given Source Bus (PRE Source Effects).
		              if the Bus Send doesn't already exist, it will be added to the overrides on the active sound
		
		Args:
		    sound_source_bus (SoundSourceBus): 
		    source_bus_send_level (float):
	**/
	public function set_source_bus_send_pre_effect(sound_source_bus:unreal.SoundSourceBus, source_bus_send_level:Float):Void;
	/**
		x.set_submix_send(submix, send_level) -> None
		Sets how much audio the sound should send to the given submix.
		
		Args:
		    submix (SoundSubmixBase): 
		    send_level (float):
	**/
	public function set_submix_send(submix:unreal.SoundSubmixBase, send_level:Float):Void;
	/**
		x.set_ui_sound(ui_sound) -> None
		Set whether sounds generated by this audio component should be considered UI sounds
		
		Args:
		    ui_sound (bool):
	**/
	public function set_ui_sound(ui_sound:Bool):Void;
	/**
		x.set_volume_multiplier(new_volume_multiplier) -> None
		Set a new volume multiplier
		
		Args:
		    new_volume_multiplier (float):
	**/
	public function set_volume_multiplier(new_volume_multiplier:Float):Void;
	/**
		x.set_wave_parameter(name, wave) -> None
		Set a sound wave instance parameter for use in sound cues played by this audio component
		
		Args:
		    name (Name): 
		    wave (SoundWave):
	**/
	public function set_wave_parameter(name:unreal.Name, wave:unreal.SoundWave):Void;
	/**
		(SoundBase):  [Read-Write] The sound to be played
	**/
	public var sound : unreal.SoundBase;
	/**
		(SoundEffectSourcePresetChain):  [Read-Write] Source Effect Chain
	**/
	public var source_effect_chain : unreal.SoundEffectSourcePresetChain;
	/**
		x.stop() -> None
		Stop an audio component's sound, issue any delegates if needed
	**/
	public function stop():Void;
	/**
		x.stop_delayed(delay_time) -> None
		Cues request to stop sound after the provided delay (In Seconds), stopping immediately if delay is zero or negative
		
		Args:
		    delay_time (float):
	**/
	public function stop_delayed(delay_time:Float):Void;
	/**
		(float):  [Read-Write] Used by the subtitle manager to prioritize subtitles wave instances spawned by this component.
	**/
	public var subtitle_priority : Float;
	/**
		(bool):  [Read-Write] If true, subtitles in the sound data will be ignored.
	**/
	public var suppress_subtitles : Bool;
	/**
		(float):  [Read-Write] The upper bound to use when randomly determining a volume multiplier
	**/
	public var volume_modulation_max : Float;
	/**
		(float):  [Read-Write] The lower bound to use when randomly determining a volume multiplier
	**/
	public var volume_modulation_min : Float;
	/**
		(float):  [Read-Write] A volume multiplier to apply to sounds generated by this component
	**/
	public var volume_multiplier : Float;
	/**
		deprecated: 'volume_multiplier_max' was renamed to 'volume_modulation_max'.
	**/
	@:deprecated
	public var volume_multiplier_max : Dynamic;
	/**
		deprecated: 'volume_multiplier_min' was renamed to 'volume_modulation_min'.
	**/
	@:deprecated
	public var volume_multiplier_min : Dynamic;
}