/* This file is generated, do not edit! */
package unreal;
@:pythonImport("unreal", "ForceFeedbackComponent") extern class ForceFeedbackComponent extends unreal.SceneComponent {
	/**
		Initialize self.  See help(type(self)) for accurate signature.
	**/
	@:native("__init__")
	public function ___init__(?args:python.VarArgs<Dynamic>, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	/**
		Initialize self.  See help(type(self)) for accurate signature.
	**/
	public function new(?args:python.VarArgs<Dynamic>, ?kwargs:python.KwArgs<Dynamic>):Void;
	/**
		x.adjust_attenuation(attenuation_settings) -> None
		Modify the attenuation settings of the component
		
		Args:
		    attenuation_settings (ForceFeedbackAttenuationSettings):
	**/
	public function adjust_attenuation(attenuation_settings:Dynamic):Void;
	/**
		(ForceFeedbackAttenuationSettings):  [Read-Write] If bOverrideSettings is true, the attenuation properties to use for effects generated by this component
	**/
	public var attenuation_overrides : unreal.ForceFeedbackAttenuationSettings;
	/**
		(ForceFeedbackAttenuation):  [Read-Write] If bOverrideSettings is false, the asset to use to determine attenuation properties for effects generated by this component
	**/
	public var attenuation_settings : unreal.ForceFeedbackAttenuation;
	/**
		(ForceFeedbackEffect):  [Read-Only] The feedback effect to be played
	**/
	public var force_feedback_effect : unreal.ForceFeedbackEffect;
	/**
		x.get_attenuation_settings_to_apply() -> ForceFeedbackAttenuationSettings or None
		BP Get Attenuation Settings to Apply
		
		Returns:
		    ForceFeedbackAttenuationSettings or None: 
		
		    out_attenuation_settings (ForceFeedbackAttenuationSettings):
	**/
	public function get_attenuation_settings_to_apply():Dynamic;
	/**
		(bool):  [Read-Write] Should the playback of the forcefeedback pattern ignore time dilation and use the app's delta time
	**/
	public var ignore_time_dilation : Bool;
	/**
		(float):  [Read-Write] The intensity multiplier to apply to effects generated by this component
	**/
	public var intensity_multiplier : Float;
	/**
		(bool):  [Read-Write] Looping
	**/
	public var looping : Bool;
	/**
		(OnForceFeedbackFinished):  [Read-Write] called when we finish playing audio, either because it played to completion or because a Stop() call turned it off early
	**/
	public var on_force_feedback_finished : unreal.OnForceFeedbackFinished;
	/**
		(bool):  [Read-Write] Should the Attenuation Settings asset be used (false) or should the properties set directly on the component be used for attenuation properties
	**/
	public var override_attenuation : Bool;
	/**
		x.play(start_time=0.000000) -> None
		Start a feedback effect playing
		
		Args:
		    start_time (float):
	**/
	public function play(start_time:Dynamic):Void;
	/**
		x.set_force_feedback_effect(new_force_feedback_effect) -> None
		Set what force feedback effect is played by this component
		
		Args:
		    new_force_feedback_effect (ForceFeedbackEffect):
	**/
	public function set_force_feedback_effect(new_force_feedback_effect:Dynamic):Void;
	/**
		x.set_intensity_multiplier(new_intensity_multiplier) -> None
		Set a new intensity multiplier
		
		Args:
		    new_intensity_multiplier (float):
	**/
	public function set_intensity_multiplier(new_intensity_multiplier:Dynamic):Void;
	/**
		x.stop() -> None
		Stop playing the feedback effect
	**/
	public function stop():Void;
}